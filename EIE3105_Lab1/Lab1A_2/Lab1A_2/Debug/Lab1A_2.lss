
Lab1A_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000853  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024b  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main(void) 
{
  unsigned int i,j;
  DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
  while(1)
  {
	for (i = 0; i < 2000; i++){
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	0a c0       	rjmp	.+20     	; 0x9e <main+0x1e>
		for (j = 0; j < 2000; j++){}};
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	02 c0       	rjmp	.+4      	; 0x92 <main+0x12>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	80 3d       	cpi	r24, 0xD0	; 208
  94:	47 e0       	ldi	r20, 0x07	; 7
  96:	94 07       	cpc	r25, r20
  98:	c0 f3       	brcs	.-16     	; 0x8a <main+0xa>
{
  unsigned int i,j;
  DDRD = 0xFF;
  while(1)
  {
	for (i = 0; i < 2000; i++){
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
  9e:	20 3d       	cpi	r18, 0xD0	; 208
  a0:	87 e0       	ldi	r24, 0x07	; 7
  a2:	38 07       	cpc	r19, r24
  a4:	a0 f3       	brcs	.-24     	; 0x8e <main+0xe>
		for (j = 0; j < 2000; j++){}};
	PORTD = 0x55;
  a6:	85 e5       	ldi	r24, 0x55	; 85
  a8:	8b b9       	out	0x0b, r24	; 11

	for (i = 0; i < 2000; i++){
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	0a c0       	rjmp	.+20     	; 0xc4 <main+0x44>
		for (j = 0; j < 2000; j++){}};
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x38>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	80 3d       	cpi	r24, 0xD0	; 208
  ba:	47 e0       	ldi	r20, 0x07	; 7
  bc:	94 07       	cpc	r25, r20
  be:	c0 f3       	brcs	.-16     	; 0xb0 <main+0x30>
  {
	for (i = 0; i < 2000; i++){
		for (j = 0; j < 2000; j++){}};
	PORTD = 0x55;

	for (i = 0; i < 2000; i++){
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	20 3d       	cpi	r18, 0xD0	; 208
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	38 07       	cpc	r19, r24
  ca:	a0 f3       	brcs	.-24     	; 0xb4 <main+0x34>
		for (j = 0; j < 2000; j++){}};
	PORTD = 0xAA;
  cc:	8a ea       	ldi	r24, 0xAA	; 170
  ce:	8b b9       	out	0x0b, r24	; 11
  }
  d0:	d9 cf       	rjmp	.-78     	; 0x84 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
