
lab3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000330  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074c  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fd  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000375  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000114  00000000  00000000  00001a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_11>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <__vector_14>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	d6 00       	.word	0x00d6	; ????
  6a:	e4 00       	.word	0x00e4	; ????
  6c:	e7 00       	.word	0x00e7	; ????
  6e:	ea 00       	.word	0x00ea	; ????
  70:	ed 00       	.word	0x00ed	; ????
  72:	fb 00       	.word	0x00fb	; ????
  74:	02 01       	movw	r0, r4
  76:	10 01       	movw	r2, r0

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	e0 e3       	ldi	r30, 0x30	; 48
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	a4 e0       	ldi	r26, 0x04	; 4
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a6 30       	cpi	r26, 0x06	; 6
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  ae:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <lab2b_1>:
	while (1);
}

void lab2b_1()
{
		stage = stage + 1;
  b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <stage>
  ba:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <stage+0x1>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <stage+0x1>
  c4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <stage>
		if (stage == 81) {stage = 0;}
  c8:	81 35       	cpi	r24, 0x51	; 81
  ca:	91 05       	cpc	r25, r1
  cc:	21 f4       	brne	.+8      	; 0xd6 <lab2b_1+0x20>
  ce:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <stage+0x1>
  d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <stage>
		times = stage / 5;
  d6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <stage>
  da:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <stage+0x1>
  de:	ad ec       	ldi	r26, 0xCD	; 205
  e0:	bc ec       	ldi	r27, 0xCC	; 204
  e2:	0e 94 87 01 	call	0x30e	; 0x30e <__umulhisi3>
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
  f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		if (times < 5) {times = 1;}
  f6:	85 30       	cpi	r24, 0x05	; 5
  f8:	91 05       	cpc	r25, r1
  fa:	38 f4       	brcc	.+14     	; 0x10a <lab2b_1+0x54>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 104:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 108:	44 c0       	rjmp	.+136    	; 0x192 <lab2b_1+0xdc>
			else if (times < 6) {times = 2;}
 10a:	86 30       	cpi	r24, 0x06	; 6
 10c:	91 05       	cpc	r25, r1
 10e:	38 f4       	brcc	.+14     	; 0x11e <lab2b_1+0x68>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 118:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 11c:	3a c0       	rjmp	.+116    	; 0x192 <lab2b_1+0xdc>
				else if (times < 7) {times = 3;}
 11e:	87 30       	cpi	r24, 0x07	; 7
 120:	91 05       	cpc	r25, r1
 122:	38 f4       	brcc	.+14     	; 0x132 <lab2b_1+0x7c>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 12c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 130:	30 c0       	rjmp	.+96     	; 0x192 <lab2b_1+0xdc>
					else if (times < 8) {times = 4;}
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	91 05       	cpc	r25, r1
 136:	38 f4       	brcc	.+14     	; 0x146 <lab2b_1+0x90>
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 140:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 144:	26 c0       	rjmp	.+76     	; 0x192 <lab2b_1+0xdc>
						else if (times < 13) {times = 5;}
 146:	8d 30       	cpi	r24, 0x0D	; 13
 148:	91 05       	cpc	r25, r1
 14a:	38 f4       	brcc	.+14     	; 0x15a <lab2b_1+0xa4>
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 154:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 158:	1c c0       	rjmp	.+56     	; 0x192 <lab2b_1+0xdc>
							else if (times < 14) {times = 6;}
 15a:	8e 30       	cpi	r24, 0x0E	; 14
 15c:	91 05       	cpc	r25, r1
 15e:	38 f4       	brcc	.+14     	; 0x16e <lab2b_1+0xb8>
 160:	86 e0       	ldi	r24, 0x06	; 6
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 168:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 16c:	12 c0       	rjmp	.+36     	; 0x192 <lab2b_1+0xdc>
								else if (times < 15) {times = 7;}
 16e:	8f 30       	cpi	r24, 0x0F	; 15
 170:	91 05       	cpc	r25, r1
 172:	38 f4       	brcc	.+14     	; 0x182 <lab2b_1+0xcc>
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 17c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 180:	08 c0       	rjmp	.+16     	; 0x192 <lab2b_1+0xdc>
									else if (times < 16) {times = 8;}
 182:	40 97       	sbiw	r24, 0x10	; 16
 184:	30 f4       	brcc	.+12     	; 0x192 <lab2b_1+0xdc>
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 18e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		switch (times)
 192:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 196:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	e8 30       	cpi	r30, 0x08	; 8
 19e:	f1 05       	cpc	r31, r1
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <lab2b_1+0xee>
 1a2:	40 c0       	rjmp	.+128    	; 0x224 <lab2b_1+0x16e>
 1a4:	ec 5c       	subi	r30, 0xCC	; 204
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	0c 94 81 01 	jmp	0x302	; 0x302 <__tablejump2__>
		{
			case 1:
				PORTB = 0x21;
 1ac:	81 e2       	ldi	r24, 0x21	; 33
 1ae:	85 b9       	out	0x05, r24	; 5
				if (button == 1) PORTC = 0x11;
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <lab2b_1+0x10c>
 1bc:	81 e1       	ldi	r24, 0x11	; 17
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	08 95       	ret
					else PORTC = 0x10;
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	88 b9       	out	0x08, r24	; 8
 1c6:	08 95       	ret
				break;
			case 2:
				PORTB = 0x11;
 1c8:	81 e1       	ldi	r24, 0x11	; 17
 1ca:	85 b9       	out	0x05, r24	; 5
				break;
 1cc:	08 95       	ret
			case 3:
				PORTB = 0x09;
 1ce:	89 e0       	ldi	r24, 0x09	; 9
 1d0:	85 b9       	out	0x05, r24	; 5
				break;
 1d2:	08 95       	ret
			case 4:
				PORTB = 0x0B;
 1d4:	8b e0       	ldi	r24, 0x0B	; 11
 1d6:	85 b9       	out	0x05, r24	; 5
				break;
 1d8:	08 95       	ret
			case 5:
				PORTB = 0x0C;
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	85 b9       	out	0x05, r24	; 5
				if (button == 1) PORTC = 0x21;
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <lab2b_1+0x13a>
 1ea:	81 e2       	ldi	r24, 0x21	; 33
 1ec:	88 b9       	out	0x08, r24	; 8
 1ee:	08 95       	ret
					else PORTC = 0x20;				
 1f0:	80 e2       	ldi	r24, 0x20	; 32
 1f2:	88 b9       	out	0x08, r24	; 8
 1f4:	08 95       	ret
				break;
			case 6:
				PORTB = 0x0A;
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	85 b9       	out	0x05, r24	; 5
				PORTC = PORTC ^ (1<<PC5); //toggle PORTC.5
 1fa:	98 b1       	in	r25, 0x08	; 8
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	89 27       	eor	r24, r25
 200:	88 b9       	out	0x08, r24	; 8
				break;
 202:	08 95       	ret
			case 7:
				PORTB = 0x09;
 204:	89 e0       	ldi	r24, 0x09	; 9
 206:	85 b9       	out	0x05, r24	; 5
				if (button == 1) PORTC = 0x11;
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	19 f4       	brne	.+6      	; 0x21a <lab2b_1+0x164>
 214:	81 e1       	ldi	r24, 0x11	; 17
 216:	88 b9       	out	0x08, r24	; 8
 218:	08 95       	ret
					else PORTC = 0x10;				
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	88 b9       	out	0x08, r24	; 8
 21e:	08 95       	ret
				break;
			case 8:
				PORTB = 0x19;
 220:	89 e1       	ldi	r24, 0x19	; 25
 222:	85 b9       	out	0x05, r24	; 5
 224:	08 95       	ret

00000226 <lab2b>:
		}
}

void lab2b()
{
		OCR1A = 3124;  //3125 - 1  //1 for overflow
 226:	84 e3       	ldi	r24, 0x34	; 52
 228:	9c e0       	ldi	r25, 0x0C	; 12
 22a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 22e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TCCR1A = 0x00; //CTC mode
 232:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		TCCR1B = 0x0D; //CTC mode, Prescaler 1024
 236:	8d e0       	ldi	r24, 0x0D	; 13
 238:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		TIMSK1 = (1<<OCIE1A); //enable Timer1 compare match int.
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 242:	08 95       	ret

00000244 <__vector_11>:
}


ISR (TIMER1_COMPA_vect) //ISR for Timer1 compare match
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	OCR1A = 3124;
 266:	84 e3       	ldi	r24, 0x34	; 52
 268:	9c e0       	ldi	r25, 0x0C	; 12
 26a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 26e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	lab2b_1();
 272:	0e 94 5b 00 	call	0xb6	; 0xb6 <lab2b_1>
}	//Timer value = 16M * 0.2 / 1024 = 3,125 (delay 0.2 sec)
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	7f 91       	pop	r23
 284:	6f 91       	pop	r22
 286:	5f 91       	pop	r21
 288:	4f 91       	pop	r20
 28a:	3f 91       	pop	r19
 28c:	2f 91       	pop	r18
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <lab2c>:

void lab2c()
{
	OCR0A = 0x02;	//3 - 1  //1 for overflow
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = 0x02; //CTC mode
 29c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x06; //CTC mode, External clock source on T1 pin. Clock on rising edge
 29e:	96 e0       	ldi	r25, 0x06	; 6
 2a0:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1<<OCIE0A); //enable Timer0 compare match int.
 2a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2a6:	08 95       	ret

000002a8 <main>:
void lab2b();
void lab2b_1();
void lab2c();

int main(){
	DDRB = 0xFF; //PORTB output port
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xFF; //PORTC output port	
 2ac:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x00; //PORTD input port
 2ae:	1a b8       	out	0x0a, r1	; 10
	PORTB = 0x00;
 2b0:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
 2b2:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x10;
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	8b b9       	out	0x0b, r24	; 11
	
	lab2b();
 2b8:	0e 94 13 01 	call	0x226	; 0x226 <lab2b>
	lab2c();
 2bc:	0e 94 4c 01 	call	0x298	; 0x298 <lab2c>
	sei ();	//enable interrupts
 2c0:	78 94       	sei
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0x1a>

000002c4 <__vector_14>:
	TIMSK0 = (1<<OCIE0A); //enable Timer0 compare match int.
}


ISR (TIMER0_COMPA_vect) //ISR for Timer0 compare match
{
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
	OCR0A = 0x02;
 2d2:	82 e0       	ldi	r24, 0x02	; 2
 2d4:	87 bd       	out	0x27, r24	; 39
	PORTC = PORTC ^ (1<<PC0); //toggle PORTC.0
 2d6:	98 b1       	in	r25, 0x08	; 8
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	89 27       	eor	r24, r25
 2dc:	88 b9       	out	0x08, r24	; 8
	button = button * -1;
 2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2e6:	91 95       	neg	r25
 2e8:	81 95       	neg	r24
 2ea:	91 09       	sbc	r25, r1
 2ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__tablejump2__>:
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	05 90       	lpm	r0, Z+
 308:	f4 91       	lpm	r31, Z
 30a:	e0 2d       	mov	r30, r0
 30c:	09 94       	ijmp

0000030e <__umulhisi3>:
 30e:	a2 9f       	mul	r26, r18
 310:	b0 01       	movw	r22, r0
 312:	b3 9f       	mul	r27, r19
 314:	c0 01       	movw	r24, r0
 316:	a3 9f       	mul	r26, r19
 318:	70 0d       	add	r23, r0
 31a:	81 1d       	adc	r24, r1
 31c:	11 24       	eor	r1, r1
 31e:	91 1d       	adc	r25, r1
 320:	b2 9f       	mul	r27, r18
 322:	70 0d       	add	r23, r0
 324:	81 1d       	adc	r24, r1
 326:	11 24       	eor	r1, r1
 328:	91 1d       	adc	r25, r1
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
