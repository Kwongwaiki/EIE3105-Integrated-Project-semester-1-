
Lab4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000701  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  00000999  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001274  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  000015ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000169a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
 */ 

#include <avr/io.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	62 97       	sbiw	r28, 0x12	; 18
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	UCSR0A = (0<<FE0) | (0<<DOR0) | (0<<UPE0);
  aa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<TXEN0) | (1<<RXEN0); //enable USART receiver and transmitter
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (0<<UPM01) | (0<<UPM00); //Parity: None
  b4:	e2 ec       	ldi	r30, 0xC2	; 194
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	UCSR0C = (0<<USBS0); //Stop bit: 0
  ba:	10 82       	st	Z, r1
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); //Data: 8 bits
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
	UBRR0L = 207; // 4800 = 16MHz/(16*(X+1)) >> X=207
  c0:	8f ec       	ldi	r24, 0xCF	; 207
  c2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	char character[] = "We Are Ready!";
  c6:	8e e0       	ldi	r24, 0x0E	; 14
  c8:	e3 e0       	ldi	r30, 0x03	; 3
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x3a>
	char Hi[2] = "Hi";
  d8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	char Bye[4] = "Bye!";
  e0:	82 e4       	ldi	r24, 0x42	; 66
  e2:	99 e7       	ldi	r25, 0x79	; 121
  e4:	98 8b       	std	Y+16, r25	; 0x10
  e6:	8f 87       	std	Y+15, r24	; 0x0f
  e8:	85 e6       	ldi	r24, 0x65	; 101
  ea:	91 e2       	ldi	r25, 0x21	; 33
  ec:	9a 8b       	std	Y+18, r25	; 0x12
  ee:	89 8b       	std	Y+17, r24	; 0x11
	char temp;
	int i = -1;
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	3f ef       	ldi	r19, 0xFF	; 255
	while(1)
	{
		i = i + 1;
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
		while ((UCSR0A & (1<<UDRE0)) == 0); //USART sent data part
  f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fc:	85 ff       	sbrs	r24, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <main+0x62>
		temp = character[i];
 100:	e1 e0       	ldi	r30, 0x01	; 1
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	ec 0f       	add	r30, r28
 106:	fd 1f       	adc	r31, r29
 108:	e2 0f       	add	r30, r18
 10a:	f3 1f       	adc	r31, r19
 10c:	80 81       	ld	r24, Z
		UDR0 = temp;
 10e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		if (i==12) break;
 112:	2c 30       	cpi	r18, 0x0C	; 12
 114:	31 05       	cpc	r19, r1
 116:	71 f7       	brne	.-36     	; 0xf4 <main+0x5e>
	}
	while (1)
	{
		if (i>1) i = -1;
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	14 f0       	brlt	.+4      	; 0x122 <main+0x8c>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	3f ef       	ldi	r19, 0xFF	; 255
		i = i + 1;
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
		while((UCSR0A & (1<<RXC0)) == 0); //USART receive data part
 126:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12a:	88 23       	and	r24, r24
 12c:	e4 f7       	brge	.-8      	; 0x126 <main+0x90>
		temp = UDR0;
 12e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		character[i] = temp;
 132:	e1 e0       	ldi	r30, 0x01	; 1
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	ec 0f       	add	r30, r28
 138:	fd 1f       	adc	r31, r29
 13a:	e2 0f       	add	r30, r18
 13c:	f3 1f       	adc	r31, r19
 13e:	90 83       	st	Z, r25
		if (Hi[0] != character[0]) i = -1;
 140:	54 2f       	mov	r21, r20
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	48 17       	cp	r20, r24
 146:	11 f0       	breq	.+4      	; 0x14c <main+0xb6>
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	3f ef       	ldi	r19, 0xFF	; 255
		if ((Hi[0] == character[0]) && ((Hi[1] == temp)&&(i = 1)))	
 14c:	58 13       	cpse	r21, r24
 14e:	e4 cf       	rjmp	.-56     	; 0x118 <main+0x82>
 150:	96 13       	cpse	r25, r22
 152:	e2 cf       	rjmp	.-60     	; 0x118 <main+0x82>
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	3f ef       	ldi	r19, 0xFF	; 255
		{
			i = -1;
			while (1)
			{
				i = i + 1;
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
				while ((UCSR0A & (1<<UDRE0)) == 0); //USART sent data part
 15c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 160:	85 ff       	sbrs	r24, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <main+0xc6>
				temp = Bye[i];
 164:	ef e0       	ldi	r30, 0x0F	; 15
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ec 0f       	add	r30, r28
 16a:	fd 1f       	adc	r31, r29
 16c:	e2 0f       	add	r30, r18
 16e:	f3 1f       	adc	r31, r19
 170:	80 81       	ld	r24, Z
				UDR0 = temp;
 172:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
				if (i==3) break;
 176:	23 30       	cpi	r18, 0x03	; 3
 178:	31 05       	cpc	r19, r1
 17a:	71 f7       	brne	.-36     	; 0x158 <main+0xc2>
 17c:	cd cf       	rjmp	.-102    	; 0x118 <main+0x82>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
