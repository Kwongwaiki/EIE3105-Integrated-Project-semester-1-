
Lab4D_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000236  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800116  00800116  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075f  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cf  00000000  00000000  00001123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ed  00000000  00000000  000017ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 09 01 	call	0x212	; 0x212 <main>
  9e:	0c 94 19 01 	jmp	0x232	; 0x232 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
int i = -1;
int k = 0;
int state = 0;

ISR(USART_UDRE_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if (state == 0)
  b8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  bc:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
  c0:	89 2b       	or	r24, r25
  c2:	09 f5       	brne	.+66     	; 0x106 <__vector_19+0x60>
	{
		i = i + 1;
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		UDR0 = character[i];
  d6:	fc 01       	movw	r30, r24
  d8:	e8 5f       	subi	r30, 0xF8	; 248
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	80 81       	ld	r24, Z
  de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		if (i == 12)
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	0c 97       	sbiw	r24, 0x0c	; 12
  ec:	61 f4       	brne	.+24     	; 0x106 <__vector_19+0x60>
		{
			state = 1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
  f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
			i = -1;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	if (state == 2)
 106:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 10a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 10e:	02 97       	sbiw	r24, 0x02	; 2
 110:	f1 f4       	brne	.+60     	; 0x14e <__vector_19+0xa8>
	{
		UDR0 = Bye[k];
 112:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <k>
 116:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <k+0x1>
 11a:	ee 5f       	subi	r30, 0xFE	; 254
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	80 81       	ld	r24, Z
 120:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		k = k + 1;
 124:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <k>
 128:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <k+0x1>
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <k+0x1>
 132:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <k>
		if (k==4)
 136:	04 97       	sbiw	r24, 0x04	; 4
 138:	51 f4       	brne	.+20     	; 0x14e <__vector_19+0xa8>
		{
			state = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 142:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
			k = 0;
 146:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <k+0x1>
 14a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <k>
		}
	}
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_18>:

ISR(USART_RX_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	if (state == 1)
 178:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 17c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	d9 f5       	brne	.+118    	; 0x1fa <__vector_18+0x9a>
	{
		if (i>1) {i = -1;}
 184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18c:	02 97       	sbiw	r24, 0x02	; 2
 18e:	34 f0       	brlt	.+12     	; 0x19c <__vector_18+0x3c>
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		i = i + 1;
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		temp = UDR0;
 1ae:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b2:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <temp>
		character[i] = temp;
 1b6:	fc 01       	movw	r30, r24
 1b8:	e8 5f       	subi	r30, 0xF8	; 248
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	20 83       	st	Z, r18
		if (Hi[0] != character[0]) {i = -1;}
 1be:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Hi>
 1c2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <character>
 1c6:	98 17       	cp	r25, r24
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <__vector_18+0x76>
 1ca:	4f ef       	ldi	r20, 0xFF	; 255
 1cc:	5f ef       	ldi	r21, 0xFF	; 255
 1ce:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d2:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
		if ((Hi[0] == character[0]) && ((Hi[1] == temp)&&(i = 1)))
 1d6:	98 13       	cpse	r25, r24
 1d8:	10 c0       	rjmp	.+32     	; 0x1fa <__vector_18+0x9a>
 1da:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Hi+0x1>
 1de:	28 13       	cpse	r18, r24
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <__vector_18+0x9a>
		{
			i = -1;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	9f ef       	ldi	r25, 0xFF	; 255
 1e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			state = 2;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 1f6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
		}
	}
}
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	5f 91       	pop	r21
 204:	4f 91       	pop	r20
 206:	2f 91       	pop	r18
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <main>:


int main(void)
{
	UCSR0A = (0<<FE0) | (0<<DOR0) | (0<<UPE0);
 212:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXEN0) | (1<<RXCIE0) | (1<<TXEN0) | (1<<UDRIE0); //enable USART receiver and transmitter
 216:	88 eb       	ldi	r24, 0xB8	; 184
 218:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (0<<UPM01) | (0<<UPM00); //Parity: None
 21c:	e2 ec       	ldi	r30, 0xC2	; 194
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	10 82       	st	Z, r1
	UCSR0C = (0<<USBS0); //Stop bit: 0
 222:	10 82       	st	Z, r1
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01) | (1<<UMSEL01); //Data: 8 bits
 224:	86 e8       	ldi	r24, 0x86	; 134
 226:	80 83       	st	Z, r24
	UBRR0L = 207; // 4800 = 16MHz/(16*(X+1)) >> X=207
 228:	8f ec       	ldi	r24, 0xCF	; 207
 22a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	sei();
 22e:	78 94       	sei
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x1e>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
